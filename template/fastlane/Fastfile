# Customise this file, documentation can be found here:
# https://github.com/fastlane/fastlane/tree/master/fastlane/docs
# All available actions: https://docs.fastlane.tools/actions
# can also be listed using the `fastlane actions` command

# Change the syntax highlighting to Ruby
# All lines starting with a # are ignored when running `fastlane`

# If you want to automatically update fastlane if a new version is available:
# update_fastlane

# This is the minimum version number required.
# Update this, if you use features of a newer version
fastlane_version "2.19.1"

default_platform :ios

after_all do |lane|

end

def get_next_build_number(searchForTag)
  lastbuildtag = `git describe --all --match "#{searchForTag}*"`
  match = /\/[[:digit:]]+(\-|$)/.match(lastbuildtag)
  lastchar = match[0].length - 1
  buildNumberStr = match[0][1..lastchar]

  buildNumber = buildNumberStr.to_i
  buildNumber = buildNumber + 1
  return buildNumber.to_s
end

def setup_app(app_identifier, name_suffix, justBuild)
  produce(
    app_name: name_suffix ? "<%= DISPLAY_NAME %> #{name_suffix}" : "<%= DISPLAY_NAME %>",
    app_identifier: app_identifier,
    skip_itc: justBuild,
    <% if(ENABLE_TEAMS) {%>team_name: ENV['FASTLANE_TEAM_NAME'] <%}%>
  )
  <% if(HAS_EXTENSION_SUFFIX) {%>produce(
    app_name: name_suffix ? "<%= DISPLAY_NAME %> #{name_suffix} <%= EXTENSION_SUFFIX %>" : "<%= DISPLAY_NAME %> <%= EXTENSION_SUFFIX %>",
    app_identifier: app_identifier,
    skip_itc: justBuild,
    bundle_identifier_suffix: "<%= EXTENSION_SUFFIX %>",
    <% if(ENABLE_TEAMS) {%>team_name: ENV['FASTLANE_TEAM_NAME'] <%}%>
  )
  <%}%>
end

def certs_n_shit(app_identifier, name_suffix)
  setup_app(app_identifier, name_suffix, true)
  match(
    type: "appstore",
    app_identifier: [
      app_identifier,
      <% if(HAS_EXTENSION_SUFFIX) {%>"{app_identifier}.<%= EXTENSION_SUFFIX %>"<%}%>
    ],
    clone_branch_directly: true
  ) # more information: https://codesigning.guide
end

error do |lane, exception|
  notification(
    title: 'Something went wrong!',
    message: exception.message
  )
end

before_all do
  packageJson = JSON.parse(File.read("../package.json"))
  versionNumber = packageJson["version"]
  ENV['VERSION_NUMBER'] = ENV['FL_VERSION_NUMBER_VERSION_NUMBER'] = lane_context[SharedValues::VERSION_NUMBER] = versionNumber
  <% if(ENABLE_TEAMS) { %>ENV['FASTLANE_TEAM_NAME'] = ENV['DEV_PORTAL_TEAM_NAME'] = '<%= TEAM_NAME %>'
  ENV['PILOT_TEAM_NAME'] = ENV['FASTLANE_ITC_TEAM_NAME'] = '<%=TEAM_NAME_ASCII%>'<%}%>
  <% if(ENABLE_ITC_PROVIDER) { %>ENV['PILOT_ITC_PROVIDER'] = '<%= PILOT_ITC_PROVIDER %>'<%}%>

  <% if(!MATCH_GIT_URL) {%>#<%}%>ENV['MATCH_GIT_URL'] = '<%= MATCH_GIT_URL %>'
  ENV['SUPPLY_JSON_KEY'] = ENV['<%= SUPPLY_JSON_KEY %>']
end

platform :android do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    ENV['APPICON_PATH']='/android/app/src/main/res'
  end

  desc "Rebuild icons"
  lane :icons do
    android_appicon(
      appicon_image_file: 'appicon.png',
      appicon_devices: [:phone, :tablet],
      appicon_path: ".#{ENV['APPICON_PATH']}/mipmap"
    )

    android_appicon(
      appicon_image_file: 'appicon-notification-android.png',
      appicon_filename: 'ic_notification',
      appicon_devices: [:phone, :tablet],
      appicon_path: ".#{ENV['APPICON_PATH']}/mipmap"
    )
  end

  desc "Submit a new Alpha Build to Play Store"
  lane :alpha do
    ensure_git_status_clean

    buildNumber = get_next_build_number('fastlane-android')
    ENV['BUILD_NUMBER'] = buildNumber
    versionNumber = ENV['VERSION_NUMBER']

    lane_context[SharedValues::BUILD_NUMBER] = buildNumber
    <% if(ENABLE_BUGSNAG) { %>
    bundleForBugsnag('android')
    <% } %>
    gradle(task: 'clean', project_dir: "android/") # Clean the Gradle project
    <% if(SUPPORT_MULTIPLE_APP_IDS) {%>deployandroid(false, 'staging')<%}%>
    <% if(!SUPPORT_MULTIPLE_APP_IDS) {%>deployandroid(true, '')<%}%>

    add_git_tag(
      grouping: "fastlane-android-builds",
      prefix: "#{versionNumber}/",
      build_number: buildNumber
    )

    push_git_tags

    <% if(SUPPORT_MULTIPLE_APP_IDS) {%>#add any additional appIds after adding the git tag - if one has succeeded (but others fail) we want the next build to be incremented
    deployandroid(true, 'production')<%}%>
    notification(
      title: 'Done!',
      message: "Deployed new version #{versionNumber} (#{buildNumber}) to Google Play"
    )
  end

  desc "Build Android"
  lane :build do
    buildNumber = get_next_build_number('fastlane-android')

    gradle(task: 'clean', project_dir: "android/") # Clean the Gradle project
    gradle(task: 'assemble', build_type: 'Release', project_dir: 'android/', flavor: 'staging',  properties: {
      'buildNumber' => buildNumber.to_i,
      'versionNumber' => ENV['VERSION_NUMBER']
    }) # Build the Release APK

    notification(
      title: 'Done!',
      message: "Android built and ready"
    )
  end
end

def deployandroid(is_production = false, flavor)
  `find $TMPDIR/react-native-packager-cache-* -name "mypattern" | xargs rm`;
  `rm -rf $TMPDIR`;

  app_identifier = is_production ? "<%= APP_IDENTIFIER %>" : "<%= APP_IDENTIFIER %>.#{flavor}"

  if !is_production
    add_badge(
      shield: "#{ENV['VERSION_NUMBER']}-#{lane_context[SharedValues::BUILD_NUMBER]}-orange",
      no_badge: is_production,
      alpha: true,
      dark: true,
      glob: "#{ENV['APPICON_PATH']}/**/*.{png,PNG}"
    )
  end

  path_to_apk = flavor != '' ? "android/app/build/outputs/apk/app-#{flavor}-release.apk" : "android/app/build/outputs/apk/app-release.apk"

  gradle(task: 'assemble', build_type: 'Release', project_dir: 'android/', flavor: flavor, properties: {
    'buildNumber' => ENV['BUILD_NUMBER'],
    'versionNumber' => ENV['VERSION_NUMBER']
  }) # Build the Release APK

  supply(track: 'alpha',
    package_name: app_identifier,
    apk: path_to_apk,
    skip_upload_metadata: true,
    skip_upload_images: true,
    skip_upload_screenshots: true
  ) # Upload the APK to the Play Store (alpha)
  <% if(ENABLE_BUGSNAG) { %>
  uploadBugsnag('android', app_identifier, ENV['VERSION_NUMBER'], lane_context[SharedValues::BUILD_NUMBER])
  <% } %>

  reset_git_repo(
    files: [
      ".#{ENV['APPICON_PATH']}",
    ]
  )
end

def resignAndDeploy(app_identifier, app_name_suffix)
  ENV["APP_IDENTIFIER"] = ENV['SIGH_APP_IDENTIFIER'] = app_identifier
  `rm -rf $TMPDIR`;

  setup_app(app_identifier, app_name_suffix, false)

  act(
    archive_path: "<%= PROJECT_NAME %>.ipa",
    plist_values: {
      ":CFBundleIdentifier" => app_identifier,
    },
  )
  <% if(HAS_EXTENSION_SUFFIX) {%>
  setup_app("#{app_identifier}.<%= EXTENSION_SUFFIX %>", "#{app_name_suffix} <%= EXTENSION_SUFFIX %>", false)
  act(
    archive_path: "<%= PROJECT_NAME %>.ipa",
    plist_file: "PlugIns/<%= EXTENSION_SUFFIX %>.appex/Info.plist",
    plist_values: {
      ":CFBundleIdentifier" => "#{app_identifier}.<%= EXTENSION_SUFFIX %>",
    },
  )<%}%>
  sigh(app_identifier: "#{app_identifier}")
  <% if(HAS_EXTENSION_SUFFIX) {%>sigh(app_identifier: "#{app_identifier}.<%= EXTENSION_SUFFIX %>")<%}%>
  resign(
    ipa: "<%= PROJECT_NAME %>.ipa",
    use_app_entitlements: true,
    display_name: app_name_suffix ? "<%= DISPLAY_NAME %> #{app_name_suffix}" : "<%= DISPLAY_NAME %>",
    signing_identity: "<%= SIGNING_IDENTITY %>",
    bundle_id: app_identifier,
    provisioning_profile: {
      "#{app_identifier}" => "AppStore_#{app_identifier}.mobileprovision",
      <% if(HAS_EXTENSION_SUFFIX) {%>"#{app_identifier}.<%= EXTENSION_SUFFIX %>" => "AppStore_#{app_identifier}.<%= EXTENSION_SUFFIX %>.mobileprovision"<%}%>
    }
  )

  begin
    pilot(
      skip_waiting_for_build_processing: true,
      wait_for_uploaded_build: false,
      app_identifier: ENV['APP_IDENTIFIER'],
    )

    rescue => ex
      UI.important('deliver failed, but continuing anyway!')
  end
  <% if(ENABLE_BUGSNAG) { %>
  uploadBugsnag('ios', app_identifier, ENV['VERSION_NUMBER'], lane_context[SharedValues::BUILD_NUMBER])
  <% } %>
end

def bundleForBugsnag(platform)
  Dir.chdir('..'){
    system("react-native bundle --platform #{platform} --bundle-output #{platform}.bundle --sourcemap-output #{platform}.bundle.map --entry-file index.js") || exit(1)
  }
end

def uploadBugsnag(platform, bundle, version, buildnumber)
  Dir.chdir('..'){
    system("curl https://upload.bugsnag.com/ -F apiKey=<%= BUGSNAG_API_KEY %> -F codeBundleId=#{bundle}-#{version}-#{buildnumber} -F minifiedUrl=main.jsbundle* -F sourceMap=@#{platform}.bundle.map -F minifiedFile=@#{platform}.bundle -F overwrite=true") || exit(1)

    if platform == 'ios'
      upload_symbols_to_bugsnag
    end
  }
end

platform :ios do
  before_all do
    # ENV["SLACK_URL"] = "https://hooks.slack.com/services/..."
    ENV["XCODE_PROJECT"] = ENV['FL_BUILD_NUMBER_PROJECT'] = ENV['FL_VERSION_NUMBER_PROJECT'] = "./ios/<%= PROJECT_NAME %>.xcodeproj"
  end

  desc "certs_n_shit"
  lane :certs do
    # recommended if you're using the config setup suggested
    certs_n_shit('<%= APP_IDENTIFIER %>.development', 'development')
  end

  desc "deploy all ios builds"
  lane :deployios do
    # add all app identifiers you want to upload here
    <% if(SUPPORT_MULTIPLE_APP_IDS) {%>resignAndDeploy('<%= APP_IDENTIFIER %>.staging', 'Beta')<%}%>
    resignAndDeploy('<%= APP_IDENTIFIER %>', false)
  end

  desc "Regenerates appIcons"
  lane :icons do
    appicon(
      appicon_image_file: 'appicon-no-alpha.png',
      appicon_devices: [:ipad, :iphone],
      appicon_path: ENV['APPICON_PATH']
    )
  end

  desc "Submit a new Beta Build to Apple TestFlight"
  desc "This will also make sure the profile is up to date"
  lane :beta do
    ensure_git_status_clean

    buildNumber = get_next_build_number('fastlane-ios')
    ENV['BUILD_NUMBER'] = ENV['FL_BUILD_NUMBER_BUILD_NUMBER'] = lane_context[SharedValues::BUILD_NUMBER] = buildNumber

    increment_build_number()
    increment_version_number()

    update_info_plist(
      plist_path: "./<%= PROJECT_NAME %>/Info.plist",
      xcodeproj: ENV["XCODE_PROJECT"],
      block: lambda { |plist|
        plist.delete("NSAppTransportSecurity")
      }
    )

    certs

    gym(
      scheme: "<%= PROJECT_NAME %>",
      <% if(ENABLE_WORKSPACES) {%>workspace: './ios/<%= PROJECT_NAME %>.xcworkspace'<%}%>
      <% if(!ENABLE_WORKSPACES) {%>project: ENV["XCODE_PROJECT"]<%}%>
    )
    <% if(ENABLE_BUGSNAG) { %>
    bundleForBugsnag("ios")
    <% } %>
    # resets temporary changes to
    reset_git_repo(
      files: [
        "./ios/<%= PROJECT_NAME %>/Info.plist",
        "./ios/<%= PROJECT_NAME %>Tests/Info.plist",
        "./ios/<%= PROJECT_NAME %>-tvOS/Info.plist",
        "./ios/<%= PROJECT_NAME %>-tvOSTests/Info.plist",
        "#{ENV["XCODE_PROJECT"] }/project.pbxproj"
      ]
    )

    # bump buildnumber by adding git tag
    add_git_tag(
      grouping: "fastlane-ios-builds",
      prefix: "#{ENV['VERSION_NUMBER']}/",
      build_number: buildNumber
    )

    push_git_tags

    deployios

    message = "Deployed new version #{ENV['VERSION_NUMBER']} (#{buildNumber}) to iTunes Connect, expected review time is #{review_time} days :rocket:";

    puts message

    notification(
      title: 'Done!',
      message: message
    )
  end
end
